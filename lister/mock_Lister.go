// Code generated by mockery v2.43.0. DO NOT EDIT.

package lister

import (
	model "github.com/joshmedeski/sesh/model"
	mock "github.com/stretchr/testify/mock"
)

// MockLister is an autogenerated mock type for the Lister type
type MockLister struct {
	mock.Mock
}

type MockLister_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLister) EXPECT() *MockLister_Expecter {
	return &MockLister_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: opts
func (_m *MockLister) List(opts ListOptions) ([]model.SeshSession, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.SeshSession
	var r1 error
	if rf, ok := ret.Get(0).(func(ListOptions) ([]model.SeshSession, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(ListOptions) []model.SeshSession); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SeshSession)
		}
	}

	if rf, ok := ret.Get(1).(func(ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLister_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockLister_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - opts ListOptions
func (_e *MockLister_Expecter) List(opts interface{}) *MockLister_List_Call {
	return &MockLister_List_Call{Call: _e.mock.On("List", opts)}
}

func (_c *MockLister_List_Call) Run(run func(opts ListOptions)) *MockLister_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ListOptions))
	})
	return _c
}

func (_c *MockLister_List_Call) Return(_a0 []model.SeshSession, _a1 error) *MockLister_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLister_List_Call) RunAndReturn(run func(ListOptions) ([]model.SeshSession, error)) *MockLister_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLister creates a new instance of MockLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLister {
	mock := &MockLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
